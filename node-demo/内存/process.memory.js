console.log(process.memoryUsage())

/** 
 * process.memoryUsage():
 * { rss: 21147648,// 进程的常驻内存, 进程的内存有几部分，一部分是 rss，其余部分在交换区(swap)或者文件系统(filesystem)中。
 *  heapTotal: 7159808, 已经申请到的堆内存
 *  heapUsed: 4310200, 当前使用了的堆内存
 *  external: 8224 }
 * 
 * 注意： Buffer所用的内存是v8的堆外内存，而是在Node的C++层面实现内存的申请
 */


/**
 * V8 的内存限制： 老生代(64位系统下约为1.4 GB，32位系统下约为0.7 GB)，新生代(64位系统下约为32M,32位系统下约为16M)
 * 为什么要做内存限制：
 * V8做一次小的垃圾回收要50ms以上，做一次非增量式的垃圾回收甚至要1s以上。
 * 这是垃圾回收中引起JavaScript线程暂停运行的时间，在这样的时间开销下，应用的性能和响应能都会直线下降。
 *
 */


/**
 * Node在启动时，可以通过传递--max-old-space-size 或者--max-new-space-size 来调整内存限制的大小
 * node --max-old-space-size=1700 test.js // 单位：MB
 * node --max-new-space-size=1024 test.js // 单位：KB
 */

/**
* V8的垃圾回收主要是：分代式垃圾回收机制
* 描述：现代的垃圾回收算法按对象的存活时间将内存的垃圾回收进行不同的分代，然后分别对不同的分代内存施以更高效的算法
* 
*/

/**
 * 在V8中，主要分为老生代跟新生代
 * 新生代中的对象为存活时间较短的对象
 * 老生代中的对象为存活时间较长或常驻内存的对象
 */

